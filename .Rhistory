num_country %>% count(country)
# Corregimos siglas en los programas
meta_prog$name_of_the_program[meta_prog$name_of_the_program == "PANES" & meta_prog$country == "Uruguay"] <- "Plan de Atención Nacional a la Emergencia Social"
meta_prog$name_of_the_program[meta_prog$name_of_the_program == "PRODIAT" & meta_prog$country == "Mexico"] <- "Programa para el Desarrollo de las Industrias de Alta Tecnología"
meta_prog$name_of_the_program[meta_prog$name_of_the_program == "PROBECAT" & meta_prog$country == "Mexico"] <- "Programa de Becas de Capacitacion para Trabajadores Desempleados"
meta_prog$name_of_the_program[meta_prog$name_of_the_program == "PROBECAT/SICAT" & meta_prog$country == "Mexico"] <- "Programa de Becas de Capacitacion para Trabajadores Desempleados (PROBECAT) y Sistema de Capacitación para el Trabajo (SICAT)"
meta_prog$name_of_the_program[meta_prog$name_of_the_program == "PRONATEC" & meta_prog$country == "Brazil"] <- "Programa Nacional de Enseñanza Técnica y Empleo (PRONATEC)"
meta_prog$name_of_the_program[meta_prog$name_of_the_program == "PLANE" & meta_prog$country == "Bolivia"] <- "Plan Nacional de Empleo de Emergencia"
meta_prog$name_of_the_program[meta_prog$name_of_the_program == "REPRO" & meta_prog$country == "Argentina"] <- "Programa de Recuperación y Sostenimiento Productivo"
# Numero de programas por pais
num_country <- meta_prog %>% distinct(country, name_of_the_program)
num_country %>% count(country)
meta_link <- meta_sample %>%
# Quitar el signo a los no significativos
mutate(across(.cols = starts_with("out_"), gsub, pattern = "\\\\.*", replacement = "")) %>%
mutate(across(.cols = starts_with("out_"), gsub, pattern = "/.*", replacement = "")) %>%
# Solo pais, programa y resultados
dplyr::select(country, name_of_the_program, abstract, starts_with('url'), starts_with("out_")) %>%
# Pasar de wide a long
pivot_longer(cols = starts_with("out_"), names_to = "type_outcome", values_to = "value_outcome") %>%
# Renombrar signos
mutate(across(.cols = value_outcome, ~replace(., value_outcome == '+', 'positive'))) %>%
mutate(across(.cols = value_outcome, ~replace(., value_outcome == '-', 'negative'))) %>%
mutate(across(.cols = value_outcome, ~replace(., value_outcome == '−', 'negative'))) %>%
# Solo observaciones con resultados reportados
drop_na(value_outcome) %>%
# Contar tipo de resultados por programa y pais
count(country, name_of_the_program, abstract, url, url_prog, url_prog_d, type_outcome, value_outcome) %>%
# Sin distinguir por grupo poblacional (genero, edad)
dplyr::filter(!str_detect(type_outcome, '_m|_w|_y')) %>%
# Un mismo programa puede ser evaluado varias veces y tener resultados distintos
# Es importante citar la evaluacion que reporta X resultado
group_by(country, name_of_the_program, abstract, url_prog, url_prog_d, type_outcome, value_outcome) %>%
summarise(url = paste0(url, collapse = "; "),
# abstract = paste0(abstract, collapse = "; "),
# url_prog = paste0(url_prog, collapse = "; "),
# url_prog_d = paste0(url_prog_d, collapse = "; "),
n = sum(n, na.rm = T)) %>%
ungroup()
# Corregimos siglas en los programas
meta_link$name_of_the_program[meta_link$name_of_the_program == "PANES" & meta_link$country == "Uruguay"] <- "Plan de Atención Nacional a la Emergencia Social"
meta_link$name_of_the_program[meta_link$name_of_the_program == "PRODIAT" & meta_link$country == "Mexico"] <- "Programa para el Desarrollo de las Industrias de Alta Tecnología"
meta_link$name_of_the_program[meta_link$name_of_the_program == "PROBECAT" & meta_link$country == "Mexico"] <- "Programa de Becas de Capacitacion para Trabajadores Desempleados"
meta_link$name_of_the_program[meta_link$name_of_the_program == "PROBECAT/SICAT" & meta_link$country == "Mexico"] <- "Programa de Becas de Capacitacion para Trabajadores Desempleados (PROBECAT) y Sistema de Capacitación para el Trabajo (SICAT)"
meta_link$name_of_the_program[meta_link$name_of_the_program == "PRONATEC" & meta_link$country == "Brazil"] <- "Programa Nacional de Enseñanza Técnica y Empleo (PRONATEC)"
meta_link$name_of_the_program[meta_link$name_of_the_program == "PLANE" & meta_link$country == "Bolivia"] <- "Plan Nacional de Empleo de Emergencia"
meta_link$name_of_the_program[meta_link$name_of_the_program == "REPRO" & meta_link$country == "Argentina"] <- "Programa de Recuperación y Sostenimiento Productivo"
# Las bases con y sin url son identicas en los outcomes; exportamos solo la que incluye url's
all(meta_prog$name_of_the_program == meta_link$name_of_the_program)
all(meta_prog$n == meta_link$n)
all(meta_prog$country == meta_link$country)
meta_link_d <- meta_sample %>%
# Quitar el signo a los no significativos
mutate(across(.cols = starts_with("out_"), gsub, pattern = "\\\\.*", replacement = "")) %>%
mutate(across(.cols = starts_with("out_"), gsub, pattern = "/.*", replacement = "")) %>%
# Solo pais, programa y resultados
dplyr::select(country, name_of_the_program, abstract, starts_with('url'), starts_with("out_")) %>%
# Pasar de wide a long
pivot_longer(cols = starts_with("out_"), names_to = "type_outcome", values_to = "value_outcome") %>%
# Renombrar signos
mutate(across(.cols = value_outcome, ~replace(., value_outcome == '+', 'positive'))) %>%
mutate(across(.cols = value_outcome, ~replace(., value_outcome == '-', 'negative'))) %>%
mutate(across(.cols = value_outcome, ~replace(., value_outcome == '−', 'negative'))) %>%
# Solo observaciones con resultados reportados
drop_na(value_outcome) %>%
# Contar tipo de resultados por programa y pais
count(country, name_of_the_program, abstract, url, url_prog, url_prog_d, type_outcome, value_outcome) %>%
# Incluir a jovenes
mutate(type_outcome = gsub("_y", "", type_outcome)) %>%
# Incluir a mujeres solo si el programa es enfocado en ellas
# (para evitar reportar efectos heterogeneos de genero sin considerar hombres)
mutate(type_outcome = ifelse(str_detect(abstract, "mujer"), gsub("_w", "", type_outcome), type_outcome)) %>%
# Sin distinguir por grupo poblacional (genero, edad)
dplyr::filter(!str_detect(type_outcome, '_m|_w|_y')) %>%
# Un mismo programa puede ser evaluado varias veces y tener resultados distintos
# Es importante citar la evaluacion que reporta X resultado
group_by(country, name_of_the_program, abstract, url_prog, url_prog_d, type_outcome, value_outcome) %>%
summarise(url = paste0(unique(url), collapse = "; "),
# abstract = paste0(abstract, collapse = "; "),
# url_prog = paste0(url_prog, collapse = "; "),
# url_prog_d = paste0(url_prog_d, collapse = "; "),
n = sum(n, na.rm = T)) %>%
ungroup()
# Corregimos siglas en los programas
meta_link_d$name_of_the_program[meta_link_d$name_of_the_program == "PANES" & meta_link_d$country == "Uruguay"] <- "Plan de Atención Nacional a la Emergencia Social"
meta_link_d$name_of_the_program[meta_link_d$name_of_the_program == "PRODIAT" & meta_link_d$country == "Mexico"] <- "Programa para el Desarrollo de las Industrias de Alta Tecnología"
meta_link_d$name_of_the_program[meta_link_d$name_of_the_program == "PROBECAT" & meta_link_d$country == "Mexico"] <- "Programa de Becas de Capacitacion para Trabajadores Desempleados"
meta_link_d$name_of_the_program[meta_link_d$name_of_the_program == "PROBECAT/SICAT" & meta_link_d$country == "Mexico"] <- "Programa de Becas de Capacitacion para Trabajadores Desempleados (PROBECAT) y Sistema de Capacitación para el Trabajo (SICAT)"
meta_link_d$name_of_the_program[meta_link_d$name_of_the_program == "PRONATEC" & meta_link_d$country == "Brazil"] <- "Programa Nacional de Enseñanza Técnica y Empleo (PRONATEC)"
meta_link_d$name_of_the_program[meta_link_d$name_of_the_program == "PLANE" & meta_link_d$country == "Bolivia"] <- "Plan Nacional de Empleo de Emergencia"
meta_link_d$name_of_the_program[meta_link_d$name_of_the_program == "REPRO" & meta_link_d$country == "Argentina"] <- "Programa de Recuperación y Sostenimiento Productivo"
# Numero de programas por pais
num_country <- meta_link_d %>% distinct(country, name_of_the_program)
num_country %>% count(country)
getwd()
saveRDS(meta_policy, glue('{datos}/Matriz/base_pais_tipo_politica.rds'))
saveRDS(meta_link, glue('{datos}/Matriz/base_pais_tipo_programa.rds'))
saveRDS(meta_link_d, glue('{datos}/Matriz/base_pais_tipo_programa_demografia.rds'))
rm(list=ls())
pacman::p_load(tidyverse, glue, sf, rgdal)
# .rs.restartR()
#--------------------------#
# paths ----
#--------------------------#
datos_ori <- "01_Datos_originales"
datos <- "02_Datos"
graficas <- "03_Graficas"
options(scipen = 999)
#-------------------------------------------------------#
# 1. Abrir Mapas ----
#-------------------------------------------------------#
# Abrir mapa UN y filtrar para LAC
# nam_en: nombre en ingles, lbl_en: etiqueta del pais en ingles
# UN define las mayusculas/minusculas segun el tipo de pais/territorio
# Se recomienda mantener Eckert IV projection para evitar distorsiones en tamanos y distancias
mapa_un <- st_read(glue("{datos_ori}/Mapas/UN_Geodata_simplified/BNDA_simplified.shp")) %>%
janitor::clean_names() %>%
dplyr::select(subreg, nam_en, lbl_en) %>%
# Solo ALC
dplyr::filter(subreg == "Latin America and the Caribbean")
# Pasar nombres a espanol siguiendo la lista oficial de UN
# https://unterm.un.org/unterm2/en/country
mapa_un <- mapa_un %>% mutate(country = lbl_en)
mapa_un$country[mapa_un$country == 'Aruba (Neth.)'] <- 'Aruba (Países Bajos)'
mapa_un$country[mapa_un$country == 'ANTIGUA AND BARBUDA'] <- 'ANTIGUA Y BARBUDA'
mapa_un$country[mapa_un$country == 'BELIZE'] <- 'BELICE'
mapa_un$country[mapa_un$country == 'Anguilla *'] <- 'Anguila *'
mapa_un$country[mapa_un$country == 'Saint Martin (Fr.)'] <- 'San Martín (Fr.)'
mapa_un$country[mapa_un$country == 'BRAZIL'] <- 'BRASIL'
mapa_un$country[mapa_un$country == 'Curaçao (Neth.)'] <- 'Curazao (Países Bajos)'
mapa_un$country[mapa_un$country == 'Cayman Islands *'] <- 'Islas Caimán *'
mapa_un$country[mapa_un$country == 'DOMINICAN REPUBLIC'] <- 'REPÚBLICA DOMINICANA'
mapa_un$country[mapa_un$country == 'Falkland Islands (Malvinas) *'] <- 'Islas Malvinas *'
mapa_un$country[mapa_un$country == 'French Guiana (Fr.)'] <- 'Guyana Francesa (Fr.)'
mapa_un$country[mapa_un$country == 'Guadeloupe (Fr.)'] <- 'Guadalupe (Fr.)'
mapa_un$country[mapa_un$country == 'GRENADA'] <- 'GRANADA'
mapa_un$country[mapa_un$country == 'HAITI'] <- 'HAITÍ'
mapa_un$country[mapa_un$country == 'SAINT KITTS AND NEVIS'] <- 'SAINT KITTS Y NEVIS'
mapa_un$country[mapa_un$country == 'SAINT LUCIA'] <- 'SANTA LUCÍA'
mapa_un$country[mapa_un$country == 'MEXICO'] <- 'MÉXICO'
mapa_un$country[mapa_un$country == 'Martinique (Fr.)'] <- 'Martinica (Fr.)'
mapa_un$country[mapa_un$country == 'PANAMA'] <- 'PANAMÁ'
mapa_un$country[mapa_un$country == 'PERU'] <- 'PERÚ'
mapa_un$country[mapa_un$country == 'Puerto Rico (USA)'] <- 'Puerto Rico (EUA)'
mapa_un$country[mapa_un$country == 'South Georgia and the South Sandwich Is.'] <- 'Islas Georgias del Sur y Sandwich del Sur'
mapa_un$country[mapa_un$country == 'Sint Maarten (Neth.)'] <- 'Isla de San Martín (Países Bajos)'
mapa_un$country[mapa_un$country == 'Turks and Caicos Islands *'] <- 'Islas Turcas y Caicos *'
mapa_un$country[mapa_un$country == 'TRINIDAD AND TOBAGO'] <- 'TRINIDAD Y TOBAGO'
mapa_un$country[mapa_un$country == 'SAINT VINCENT AND THE GRENADINES'] <- 'SAN VICENTE Y LAS GRANADINAS'
mapa_un$country[mapa_un$country == 'British Virgin Islands *'] <- 'Islas Vírgenes Británicas *'
mapa_un$country[mapa_un$country == 'United States Virgin Islands *'] <- 'Islas Vírgenes de los Estados Unidos *'
mapa_un$country[mapa_un$country == 'Bonaire (Neth.)'] <- 'Bonaire (Países Bajos)'
mapa_un$country[mapa_un$country == 'Sint Eustatius (Neth.)'] <- 'San Eustaquio (Países Bajos)'
mapa_un$country[mapa_un$country == 'Saba (Neth.)'] <- 'Saba (Países Bajos)'
mapa_un$country[mapa_un$country == 'Galápagos Islands (Ecuador)'] <- 'Islas Galápagos (Ecuador)'
# mapa_un$country[mapa_un$country == ''] <- ''
mapa_un <- mapa_un %>% relocate(country, .before = 'geometry')
rm(list=ls())
pacman::p_load(tidyverse, glue, sf, leaflet, rgdal, htmltools, leafem, leaflegend)
# .rs.restartR()
#--------------------------#
# paths ----
#--------------------------#
datos_ori <- "01_Datos_originales"
datos <- "02_Datos"
graficas <- "03_Graficas"
options(scipen = 999)
#-------------------------------------------------------#
# 0. Funciones ----
#-------------------------------------------------------#
fun_outcome <- function(y, y_tag){
# y = "employment"
# y_tag = 'el empleo'
print(y)
# Organizar etiquetas y base de datos para mapa
data <- meta_map[meta_map$type_outcome == y,] %>%
# Dividir las URL de los programas para aquellos con multiples evaluaciones
# Crea tantas columnas como sea necesario
tidyr::separate_wider_delim(url, delim = '; ', names_sep = "", too_few = "align_start") %>%
arrange(country, -positive) %>%
rename(url = url1)  %>%
# Nombre del programa y link al programa
mutate(tag = ifelse(url_prog_d == 1, glue("<a href='{url_prog}' target='_blank'> {name_of_the_program}</a>"), name_of_the_program),
tag = ifelse(positive > 0, glue("{tag}: <strong> ↑ </strong>"),
ifelse(negative > 0, glue("{tag}: <strong> ↓ </strong>"), glue("{tag}: <strong> —  </strong>")))) %>%
# Abstract
mutate(tag = glue("{tag} <br> <font size='-1'> {abstract} </font>"))
if(!("url2" %in% colnames(data))){
data <- data %>% mutate(url2 = NA)
}
if(!("url3" %in% colnames(data))){
data <- data %>% mutate(url3 = NA)
}
# Organizar URL para programas con 1 evaluacion
df1 <- data %>%
dplyr::filter(is.na(url2)) %>%
mutate(tag = glue("{tag}<font size='-1'> Ver evaluaciones <a href='{url}' target='_blank'> [1]</a> </font>"))
# Organizar URL para programas con >1 evaluaciones
if(sum(!is.na(data$url2)) > 0){
# Para 2 evaluaciones
df2 <- data %>%
dplyr::filter(!is.na(url2) & is.na(url3)) %>%
mutate(tag = glue("{tag}<font size='-1'> Ver evaluaciones <a href='{url}' target='_blank'> [1]</a> <a href='{url2}' target='_blank'> [2]</a> </font>"))
# Para 3 evaluaciones
df3 <- data %>%
dplyr::filter(!is.na(url3)) %>%
mutate(tag = glue("{tag}<font size='-1'> Ver evaluaciones <a href='{url}' target='_blank'> [1]</a> <a href='{url2}' target='_blank'> [2]</a> <a href='{url3}' target='_blank'> [3]</a> </font>"))
if(nrow(df3) > 0){
df1 <- bind_rows(df1, df2, df3)
} else {
df1 <- bind_rows(df1, df2)
}
}
# Organizar base final
data <- df1 %>%
group_by(country, type_outcome) %>%
mutate(
tag = str_c(tag, collapse = " <br>"),
tag = glue("<strong> Efectos sobre {y_tag} </strong> <br> {tag}")) %>%
ungroup() %>%
distinct(country, type_outcome, tag, X, Y)
# El procesamiento elimina la clase "sf" necesaria para el mapa, unimos de nuevo con mapa UN
data <- mapa_base %>% dplyr::select(country, geometry) %>% left_join(data, by = "country") %>% drop_na(type_outcome)
return(data)
}
#-------------------------------------------------------#
# 1. Mapas ----
#-------------------------------------------------------#
# Mapa UN filtrado para America
mapa_un_all <- st_read(glue("{datos_ori}/Mapas/UN_Geodata_simplified/BNDA_simplified.shp")) %>%
janitor::clean_names() %>%
dplyr::select(georeg, nam_en, lbl_en) %>%
dplyr::filter(georeg == "AME")
plot(mapa_un$geometry)
# Abrir mapa UN filtrado para ALC
mapa_un <- st_read(glue("{datos}/Mapas/mapa_un.shp")) %>% dplyr::select(country)
plot(mapa_un$geometry)
# Datos con resultados de evaluaciones de impacto
meta <- readRDS(glue('{datos}/Matriz/base_pais_tipo_programa_demografia.rds')) %>%
pivot_wider(names_from = "value_outcome", values_from = "n") %>%
mutate(across(where(is.numeric), ~replace_na(., 0))) %>%
mutate(type_outcome = gsub("out_", "", type_outcome)) %>%
arrange(country, name_of_the_program, type_outcome)
# Corregir nombres paises
meta$country[meta$country == "Brazil"] <- "Brasil"
meta$country[meta$country == "Dominican Republic"] <- "República Dominicana"
meta$country[meta$country == "Mexico"] <- "México"
meta$country[meta$country == "Panama"] <- "Panamá"
meta$country[meta$country == "Peru"] <- "Perú"
meta <- meta %>% mutate(country = str_to_upper(country))
# Tenemos información para 13 de 53 países en ALC
count(meta, country)
# Emparejamos con mapa
meta_map <- mapa_un %>% left_join(meta, by = "country") %>% drop_na(type_outcome)
# Reproyectar
mapa_un_all <- st_transform(mapa_un_all, '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
mapa_un_all <- st_set_crs(mapa_un_all, 4326)
meta_map <- st_transform(meta_map, '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
meta_map <- st_set_crs(meta_map, 4326)
plot(meta_map$geometry)
# Etiquetas de pais
meta_map <- st_make_valid(meta_map)
meta_map <- cbind(meta_map, st_coordinates(st_centroid(meta_map)))
# Colores sencillos: mismo color todos los paises con informacion
col_palette <- c("white", "#27BFE6", "#FBC412", "#A31C44", "#59BA47", "#F1692D", "#E5233D","#72ACAC", "#D4D4D4")
pnud <- "#004591"
# Titulo para mapa
tag.map.title <- htmltools::tags$style(HTML("
.leaflet-control.map-title {
transform: translate(-50%,20%);
position: fixed !important;
left: 50%;
text-align: center;
padding-left: 10px;
padding-right: 10px;
background: rgba(255,255,255,0.75);
font-weight: bold;
font-size: 20px;
}
"))
title <- htmltools::tags$div(
tag.map.title, HTML("Compendio de Evaluaciones de Impacto de políticas de Mercado Laboral Activo, Formalidad e Informalidad en ALC")
)
# Marcador de ubicacion del pais
awesome <- makeAwesomeIcon(
icon = "circle-thin",
iconColor = "darkblue",
markerColor = "darkblue",
library = "fa"
)
file_text <- readr::read_file(
paste0(.libPaths()[1],
"/leaflet/htmlwidgets/plugins/Leaflet.awesome-markers/font-awesome.min.css")
)
icon_names <- stringr::str_extract_all(file_text, "(fa-)([^:]+)")[[1]]
#--------------------------#
# B. Organizar variables ----
#--------------------------#
# Mapa base
mapa_base <- meta_map %>%
distinct(country, X, Y, .keep_all = T)
label_pais <- paste0(mapa_base$country)
# Empleo
mapa_empleo <- fun_outcome(y = "employment", y_tag = 'el empleo')
# Empleo formal
mapa_empleo_f <- fun_outcome(y = "formal_em", y_tag = 'el empleo formal')
# Empleo informal
mapa_empleo_i <- fun_outcome(y = "informal_em", y_tag = 'el empleo informal')
# Ingresos
mapa_ing <- fun_outcome(y = "earnings", y_tag = 'el ingreso')
# Ingresos formales
mapa_ing_f <- fun_outcome(y = "formal_ear", y_tag = 'el ingreso formal')
# Ingresos informales
mapa_ing_i <- fun_outcome(y = "informal_ear", y_tag = 'el ingreso informal')
# Horas trabajadas
mapa_horas <- fun_outcome(y = "hours", y_tag = 'las horas trabajadas')
#--------------------------#
# C. Mapa UN ----
#--------------------------#
country_text <- "22px"
opacity <- 0.8
# Mapa base: UN LAC
mapa_almp <-
leaflet(mapa_base, height = "98vh", width = "190vh") %>%
# Capa LAC
addPolygons(data = mapa_un_all, color = "white", weight = 1, smoothFactor = 0.5,
opacity = opacity, fillOpacity = opacity, fillColor = "white") %>%
# Mapa base y marcador de pais
addAwesomeMarkers(icon = awesome, lng = ~X, lat = ~Y) %>%
# Centrar mapa en La Paz
clearBounds() %>%
setView(lng = -68.0986, lat = -16.4907, zoom = 3) %>%
# Empleo
addPolygons(data = mapa_empleo, color = col_palette[1], weight = 1, smoothFactor = 0.5,
opacity = opacity, fillOpacity = opacity, fillColor = col_palette[2],
highlightOptions = highlightOptions(color = col_palette[2], weight = 2, bringToFront = TRUE),
label = ~mapa_empleo$country,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"), textsize = country_text, direction = "auto"),
group = "Empleo",
popup = ~tag, popupOptions = popupOptions(maxWidth = 500)) %>%
# Empleo formal
addPolygons(data = mapa_empleo_f, color = col_palette[1], weight = 1, smoothFactor = 0.5,
opacity = opacity, fillOpacity = opacity, fillColor = col_palette[3],
highlightOptions = highlightOptions(color = col_palette[3], weight = 2, bringToFront = TRUE),
label = ~mapa_empleo_f$country,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"), textsize = country_text, direction = "auto"),
group = "Empleo formal",
popup = ~tag, popupOptions = popupOptions(maxWidth = 500)) %>%
# Empleo informal
addPolygons(data = mapa_empleo_i, color = col_palette[1], weight = 1, smoothFactor = 0.5,
opacity = opacity, fillOpacity = opacity, fillColor = col_palette[4],
highlightOptions = highlightOptions(color = col_palette[4], weight = 2, bringToFront = TRUE),
label = ~mapa_empleo_i$country,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"), textsize = country_text, direction = "auto"),
group = "Empleo informal",
popup = ~tag, popupOptions = popupOptions(maxWidth = 500)) %>%
# Ingreso
addPolygons(data = mapa_ing, color = col_palette[1], weight = 1, smoothFactor = 0.5,
opacity = opacity, fillOpacity = opacity, fillColor = col_palette[5],
highlightOptions = highlightOptions(color = col_palette[5], weight = 2, bringToFront = TRUE),
label = ~mapa_ing$country,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"), textsize = country_text, direction = "auto"),
group = "Ingreso",
popup = ~tag, popupOptions = popupOptions(maxWidth = 500)) %>%
# Ingreso formal
addPolygons(data = mapa_ing_f, color = col_palette[1], weight = 1, smoothFactor = 0.5,
opacity = opacity, fillOpacity = opacity, fillColor = col_palette[6],
highlightOptions = highlightOptions(color = col_palette[6], weight = 2, bringToFront = TRUE),
label = ~mapa_ing_f$country,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"), textsize = country_text, direction = "auto"),
group = "Ingreso formal",
popup = ~tag, popupOptions = popupOptions(maxWidth = 500)) %>%
# Ingreso informal
addPolygons(data = mapa_ing_i, color = col_palette[1], weight = 1, smoothFactor = 0.5,
opacity = opacity, fillOpacity = opacity, fillColor = col_palette[7],
highlightOptions = highlightOptions(color = col_palette[7], weight = 2, bringToFront = TRUE),
label = ~mapa_ing_i$country,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"), textsize = country_text, direction = "auto"),
group = "Ingreso informal",
popup = ~tag, popupOptions = popupOptions(maxWidth = 500)) %>%
# Horas trabajadas
addPolygons(data = mapa_horas, color = col_palette[1], weight = 1, smoothFactor = 0.5,
opacity = opacity, fillOpacity = opacity, fillColor = col_palette[8],
highlightOptions = highlightOptions(color = col_palette[8], weight = 2, bringToFront = TRUE),
label = ~mapa_horas$country,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"), textsize = country_text, direction = "auto"),
group = "Horas trabajadas",
popup = ~tag, popupOptions = popupOptions(maxWidth = 500)) %>%
# Layers control
addLayersControl(
overlayGroups  = c("Empleo", "Empleo formal", "Empleo informal", "Ingreso", "Ingreso formal", "Ingreso informal", 'Horas trabajadas'),
options = layersControlOptions(collapsed = F),
position = "bottomright") %>%
# Solo mostrar la primera capa
hideGroup(c("Empleo formal", "Empleo informal", "Ingreso", "Ingreso formal", "Ingreso informal", 'Horas trabajadas')) %>%
# Title
addControl(title, position = "topright", className="map-title")
# Modificar tamano de pop-ups y capas
mapa_final <- browsable(
tagList(list(tags$head(tags$style(
# Pop-ups
".leaflet-popup-content-wrapper {
background: white;
color: black;
padding: 2px;
border-radius: 0px;
font-size: 20px;
}",
# Control de capas
".leaflet-control-layers-expanded {
line-height: 30px;
font-size: 20px;
}",
".leaflet-control-layers-list {
width: 230px;
height: 210px;
}"
)
),
mapa_almp
))
)
mapa_final
# Exportar
saveRDS(mapa_final, glue("{graficas}/mapa_almp_un-ilo.rds"))
save_html(mapa_final, glue("{graficas}/mapa_almp_un-ilo.html"))
rm(list=ls())
source("~/Library/CloudStorage/OneDrive-UnitedNationsDevelopmentProgramme/IGT_ALMP/00_Scripts/01a_Organizar_base.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UnitedNationsDevelopmentProgramme/IGT_ALMP/00_Scripts/01a_Organizar_base.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UnitedNationsDevelopmentProgramme/IGT_ALMP/00_Scripts/01a_Organizar_base.R", echo=TRUE)
# Abrimos excel original del metaanalisis
meta <- readxl::read_excel(glue("{datos_ori}/Matriz/[{mes}-2023] Matriz_Meta-analisis_ALMP_Informalidad.xlsx")) %>%
clean_names() %>%
# Renombrar columnas
rename(
# Empleo
out_employment = measured_outcomes, out_employment_w = x15, out_employment_m = x16, out_employment_y = x17,
# Ingresos
out_earnings = x18, out_earnings_w = x19, out_earnings_m = x20, out_earnings_y = x21,
# Horas trabajadas
out_hours = x22, out_hours_w = x23, out_hours_m = x24, out_hours_y = x25,
# Empleo formal
out_formal_em = x26, out_formal_em_w = x27, out_formal_em_m = x28, out_formal_em_y = x29,
# Ingreso formal
out_formal_ear = x30, out_formal_ear_w = x31, out_formal_ear_m = x32, out_formal_ear_y = x33,
# Ingreso informal
out_informal_ear = x34, out_informal_ear_w = x35, out_informal_ear_m = x36, out_informal_ear_y = x37,
# Empleo informal
out_informal_em = x38, out_informal_em_w = x39, out_informal_em_m = x40, out_informal_em_y = x41,
# Duracion de la politica
effect_short_run = effect_of_the_policy, effect_long_run = x43,
productivity = x44,
# Muestra
sample_universe = sample, sample_size = x51, sample_demographics = x52, sample_age = x53,
id = no, title = title_of_the_paper,
# URL evaluacion
url = link_source,
# Abstract y link al programa
abstract = abstract_es, url_prog = link_of_the_program, url_prog_d = link_related_to_program
) %>%
drop_na(title)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
datos_ori <- "01_Datos_originales"
cls
# Abrimos excel original del metaanalisis
meta <- readxl::read_excel(glue("{datos_ori}/Matriz/[{mes}-2023] Matriz_Meta-analisis_ALMP_Informalidad.xlsx")) %>%
clean_names() %>%
# Renombrar columnas
rename(
# Empleo
out_employment = measured_outcomes, out_employment_w = x15, out_employment_m = x16, out_employment_y = x17,
# Ingresos
out_earnings = x18, out_earnings_w = x19, out_earnings_m = x20, out_earnings_y = x21,
# Horas trabajadas
out_hours = x22, out_hours_w = x23, out_hours_m = x24, out_hours_y = x25,
# Empleo formal
out_formal_em = x26, out_formal_em_w = x27, out_formal_em_m = x28, out_formal_em_y = x29,
# Ingreso formal
out_formal_ear = x30, out_formal_ear_w = x31, out_formal_ear_m = x32, out_formal_ear_y = x33,
# Ingreso informal
out_informal_ear = x34, out_informal_ear_w = x35, out_informal_ear_m = x36, out_informal_ear_y = x37,
# Empleo informal
out_informal_em = x38, out_informal_em_w = x39, out_informal_em_m = x40, out_informal_em_y = x41,
# Duracion de la politica
effect_short_run = effect_of_the_policy, effect_long_run = x43,
productivity = x44,
# Muestra
sample_universe = sample, sample_size = x51, sample_demographics = x52, sample_age = x53,
id = no, title = title_of_the_paper,
# URL evaluacion
url = link_source,
# Abstract y link al programa
abstract = abstract_es, url_prog = link_of_the_program, url_prog_d = link_related_to_program
) %>%
drop_na(title)
saveRDS(meta_link_d, glue('{datos}/Matriz/base_pais_tipo_programa_demografia.rds'))
source("~/Library/CloudStorage/OneDrive-UnitedNationsDevelopmentProgramme/IGT_ALMP/00_Scripts/01a_Organizar_base.R", echo=TRUE)
source("~/Library/CloudStorage/OneDrive-UnitedNationsDevelopmentProgramme/IGT_ALMP/00_Scripts/01a_Organizar_base.R")
source("~/Library/CloudStorage/OneDrive-UnitedNationsDevelopmentProgramme/IGT_ALMP/00_Scripts/01b_Procesar_mapas.R")
source("~/Library/CloudStorage/OneDrive-UnitedNationsDevelopmentProgramme/IGT_ALMP/00_Scripts/01b_Procesar_mapas.R")
source("~/Library/CloudStorage/OneDrive-UnitedNationsDevelopmentProgramme/IGT_ALMP/00_Scripts/01b_Procesar_mapas.R")
